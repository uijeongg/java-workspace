package kr.ac.kopo.day06;

/*
 * 반환형 메소드명([파라미터]) {
 *     문장;
 *     문장;
 *     
 *     반환형은 void / 파라미터(매개변수 = 파라미터)는 뭔지 모르면 그냥 아무것도 안붙이면 됨
 */
public class MethodMain01 {

	
		
	static void printStar() { // printStar()는 별 열개 찍고 엔터찍는 문장들을 모아놓은 메소드야! ==> 메소드 선언부 정의부
		System.out.println("**********"); //여기서 이걸 바꾸면 아래의 호출부에 있는 코드들이 한번에 싹 다 고쳐짐. 
		                                  // = "수정에 대한 용이성"
		                                  //하지만 횟수가 줄거나 하진 않음. 그건 반복문으로만 가능. 그냥 수정~

		
		int cnt = 10; //메소드 안에서 정의된 변수는 그 메소드 안에서만 사용가능 
		//메인은 얘가 있는지도 몰라
		//별 찍을 땐 얘가 실행이 되지만, 메인가서 println할 땐 다시 실행하지 않게 됨
		//== 피호출자 값은 값이 계속 유지되지 않음. 그래서 서로 왔다갔다 하면서 전달해줘야함
		//피호출자->호출자에게 전달할거 있으면 => 리턴타입 사용
		//호출자->피호출자에게 전달은 => 파라미터 사용
	}

	public static void main(String[] args) { // 메소드의 호출부
		//printStar를 실행해봤자 main이 작동 안하면 말짱도루묵
		//그냥 얜 main에 종속적인 아이

		printStar(); // printStar가 가진 문장을 정의하고 싶을 땐 () / 메인이 피호출자 프린트스타에게 10만큼 찍으라고 전달
		System.out.println("Hello");
		printStar(); //메인이 피호출자 프린트스타에게 20만큼 찍으라고 전달
		System.out.println("Hi");
		printStar();
		System.out.println("Bye");
		printStar();
		
		//main 호출자 printStar 피호출자
		//printStar 호출자 println 피호출자
		//메소드 안에서 호출자 피호출자는 상대적인 개념. 
		
		//메소드와 메소드는 서로 독립적이라서 서로의 존재는 알지만 서로 어떤 변수를 가졌는지는 모름
		//여기선 메인이랑 프린트스타가 그런거
		//그런데 때때로 서로의 것을 알고싶을 수 있잖아? 전달할 수 있는 통로가 정의부에 있는 반환형과 파라미터
		//전달할게 없으니까 void가 붙고, printStar() 에서 파라미터가 비어있는 것
		//void = '없다'
		
		
		//메인메소드 같은 경우에는
		//메인 메소드가 피호출자에게 전달할 값은 없는 상태
		//피호출자 printStar()는 메인에 전달할게 있는 상태?
		
		
		}

}


//정리

//서로 알수없고
//그러다보니 서로 값을 전달해가면서 사용
//피호출자->호출자에게 전달할거 있으면 => 리턴타입 사용
//호출자->피호출자에게 전달은 => 파라미터 사용